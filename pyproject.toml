[tool.poetry]
name = "cicada-core"
version = "1.0.0"
description = "The Next Generation of CI/CD"
authors = ["dosisod"]
license = "GPL-3.0-only"
readme = "README.md"
repository = "https://github.com/Cicada-Software/cicada"
classifiers = [
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Typing :: Typed"
]

[tool.poetry.dependencies]
python = ">=3.11"

[tool.poetry.dev-dependencies]
black = "^22.6.0"
flake8 = "^5.0.4"
isort = "^5.10.1"
pytest = "^7.1.2"

[tool.isort]
line_length = 99
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
color_output = true
known_first_party = ["test"]

[tool.mypy]
namespace_packages = true
strict = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_unimported = true
warn_unreachable = true
allow_redefinition = true
python_version = "3.11"

[tool.coverage.run]
omit = [
  "cicada/api/logging.py",
  "cicada/api/infra/migrate.py",
  "cicada/api/__main__.py",
  # Only used during setup, needs to be manually tested
  "cicada/api/setup.py",
  # Just a bunch of abstract classes
  "cicada/domain/repo/*",
  # Requires manual testing
  "cicada/runner/*",
  # Pending e2e testing setup
  "cicada/api/infra/secret_repo.py",
  # SSO related
  "cicada/api/endpoints/oauth_util.py",
  # Requires Gitlab API
  "cicada/api/endpoints/gitlab/projects.py",
  # Manually tested
  "cicada/cli.py",
]

[tool.coverage.report]
exclude_lines = [
  "raise NotImplementedError\\(\\)",
  "pragma: no cover",
  "def __str__(self)",
  "assert False"
]
skip_covered = true
skip_empty = true

[tool.black]
line-length = 99
color = true

[tool.pytest.ini_options]
addopts = "--cov=cicada --cov-report=html --cov-report=term-missing --cov-fail-under=87 --disable-warnings"
asyncio_mode = "auto"
testpaths = ["test"]

[tool.ruff]
line-length = 99
preview = true
target-version = "py311"

select = ["ALL"]

extend-ignore = [
  "A001", "A002", "A003",
  "ANN101", "ANN002", "ANN003", "ANN102", "ANN202", "ANN401",
  "ARG002",
  "B011",
  "COM812",
  "CPY001",
  "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
  "D200", "D202", "D203", "D205", "D212",
  "D400", "D401", "D404", "D415",
  "EM101", "EM102",
  "F402", "F405",
  "FBT001", "FBT002", "FBT003",
  "FIX002", "FIX004",
  "FLY002",
  "FURB140",
  "I001",
  "N818",
  "PGH003",
  "PLC0415",
  "PLR2004",
  "PLW2901", "PLR0904",
  "PTH107", "PTH123",
  "S101",
  "SIM102",
  "TD002",
  "TD003",
  "TRY003", "TRY301",
  "UP017",

  # Fix later
  "C901",
  "PLR0911", "PLR0912", "PLR0913",
  "PLW1514", "PLW1641",

  # False positives
  "PLR6301",
]

[tool.ruff.per-file-ignores]
"cicada/*" = ["PT", "INP001"]
"cicada/api/*" = ["B008"]
"cicada/api/setup.py" = ["E501"]
"cicada/api/infra/secret_repo.py" = ["B905"]
"cicada/domain/password_hash.py" = ["T201"]
"cicada/eval/container.py" = ["S603", "S607", "S108"]
"cicada/parse/token.py" = ["E701"]
"cicada/tools/workflow_converter/github_actions.py" = ["E501"]
"test/api/webhook/github/test_github_webhook_entry.py" = ["ANN003"]
"test/ast/test_generate.py" = ["W293"]
"test/api/application/cache/test_cache_files.py" = ["S108"]
"test/api/application/cache/test_restore_cache.py" = ["S108"]
"test/eval/test_eval_exprs.py" = ["PLR0133"]

[tool.typos.default.extend-words]
Hashi = "Hashi"
iif = "iif"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"
